// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  avatarUrl         String?  @map("avatar_url")
  emailVerified     Boolean  @default(false) @map("email_verified")
  emailVerificationToken String? @map("email_verification_token")
  emailVerificationExpires DateTime? @map("email_verification_expires")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Household relationship
  householdId String?    @map("household_id")
  household   Household? @relation(fields: [householdId], references: [id], onDelete: SetNull)
  
  // Owned households
  ownedHouseholds Household[] @relation("HouseholdOwner")
  
  // Invitations sent
  sentInvitations HouseholdInvitation[] @relation("InviterRelation")
  
  // Accounts owned
  accounts     Account[]
  transactions Transaction[]
  goals        Goal[]
  
  @@map("users")
}

model Household {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Owner relationship
  ownerId String @map("owner_id")
  owner   User   @relation("HouseholdOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Members
  members     User[]
  invitations HouseholdInvitation[]
  accounts    Account[]
  goals       Goal[]
  
  @@map("households")
}

model HouseholdInvitation {
  id          String                    @id @default(cuid())
  email       String
  token       String                    @unique
  status      HouseholdInvitationStatus @default(PENDING)
  expiresAt   DateTime                  @map("expires_at")
  createdAt   DateTime                  @default(now()) @map("created_at")

  // Relationships
  householdId String    @map("household_id")
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  
  inviterId String @map("inviter_id")
  inviter   User   @relation("InviterRelation", fields: [inviterId], references: [id], onDelete: Cascade)
  
  @@map("household_invitations")
}

enum HouseholdInvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

model Account {
  id        String      @id @default(cuid())
  name      String
  type      AccountType
  balance   Decimal     @default(0) @db.Decimal(12, 2)
  currency  String      @default("COP") // ISO currency code (COP, USD, EUR, etc.)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relationships
  userId      String        @map("user_id")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  householdId String        @map("household_id")
  household   Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  
  transactions Transaction[]
  
  @@map("accounts")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
  OTHER
}

model Category {
  id          String        @id @default(cuid())
  name        String
  type        CategoryType
  color       String?
  icon        String?
  isDefault   Boolean       @default(false) @map("is_default")
  createdAt   DateTime      @default(now()) @map("created_at")
  
  transactions Transaction[]
  
  @@map("categories")
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Decimal           @db.Decimal(12, 2)
  currency    String            @default("COP") // ISO currency code
  description String?
  type        TransactionType
  date        DateTime          @default(now())
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relationships
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  accountId  String   @map("account_id")
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

model Goal {
  id            String     @id @default(cuid())
  title         String
  description   String?
  targetAmount  Decimal    @map("target_amount") @db.Decimal(12, 2)
  currentAmount Decimal    @default(0) @map("current_amount") @db.Decimal(12, 2)
  currency      String     @default("COP") // ISO currency code
  targetDate    DateTime?  @map("target_date")
  isCompleted   Boolean    @default(false) @map("is_completed")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relationships
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  householdId String    @map("household_id")
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}